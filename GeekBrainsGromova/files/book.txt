При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:

При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:

При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:

При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:

При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:

При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:

При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:

При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:

При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:

При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:

При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:

При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:

При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:

При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:

При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:

При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:

При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:

При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:

При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:

При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:

При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:

При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:

При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:

При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:

При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:

При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:

При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
При работе с пакетом java.io мы будем иметь дело с потоками двух типов: байтовые и символьные. Поскольку все с чем нам придется работать состоит просто из набора байтов, то зачастую придется иметь дело именно с байтовыми потоками данных. Символьные же потоки удобны при работе с текстом.
Давайте посмотрим на классы в пакете java.io: InputStream, OutputStream, FileInputStream, FileOutputStream, InputStreamReader, StandardCharsets, BufferedInputStream, BufferedOutputStream, DataInputStream, DataOutputStream, ByteArrayInputStream, ByteArrayOutputStream, CharArrayReader, CharArrayWriter, PrintStream, PrintWriter, PipedInputStream, PipedOutputStream, PipedReader, PipedWriter, Reader, Writer, FileReader, FileWriter, BufferedReader, BufferedWriter, SequenceInputStream, PushBackReader, RandomAccessFile, ObjectInputStream, ObjectOutputStream (Serializable, Externalizable).
На первый взгляд кажется что в этом всем невозможно разобраться и запомнить что для чего нужно. На самом же деле все классы делятся на группы: входной/выходной поток, байтовы/символьный поток, и плюс к этому каждый класс добавляет немного особенностей. Input/Reader - означает чтение, Output/Write - запись, Stream - работу с байтами, (Reader, Writer) - с символами, Buffered - добавление буферизации, (Byte, Char) - указывает тип, с которым работаем, Object - работаем с объектами (сериализация, десериализация). Теперь даже простое чтение имени класса должно навести на мысль о том, чем этот класс занимается.
Давайте приведем пример рассуждений: если мы видим слово Input, значит будем что-то считывать, если видим слово Stream, значит речь идет о байтах, если добавили слово File, значит будет работать с файлами, если увидели слово Buffered, значит применяется буферизация при чтении, итого:
